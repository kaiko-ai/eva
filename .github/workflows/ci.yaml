---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setting up PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: "3.10"
          architecture: x64
      - name: Setting up nox
        uses: wntrblm/nox@2024.04.15
        with:
          python-versions: "3.10"
      - name: Cache PDM dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pdm/cache
          key: ${{ runner.os }}-pdm-${{ hashFiles('**/pdm.lock') }}
          restore-keys: |
            ${{ runner.os }}-pdm-
      - name: Performing lint checks
        run: nox -s lint
      - name: Performing static type checks
        run: nox -s check

  tests:
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install OS dependencies
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository ppa:openslide/openslide
          sudo apt install -y openslide-tools
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Setting up PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Setting up nox
        uses: wntrblm/nox@2024.04.15
        with:
          python-versions: ${{ matrix.python-version }}
      - name: Cache PDM dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pdm/cache
          key: ${{ runner.os }}-pdm-${{ hashFiles('**/pdm.lock') }}
          restore-keys: |
            ${{ runner.os }}-pdm-
      - name: Executing unit tests
        run: nox -s test
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.10' # Upload coverage only once
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false

  build-test:
    runs-on: ubuntu-latest
    needs: [quality, tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setting up PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: "3.10"
          architecture: x64
      - name: Setting up nox
        uses: wntrblm/nox@2024.04.15
        with:
          python-versions: "3.10"
      - name: Build package
        run: nox -s build
      - name: Test built package
        run: |
          python -m pip install dist/*.whl
          eva --version
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 5

  docs:
    runs-on: ubuntu-latest
    needs: [quality, tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setting up PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: "3.10"
          architecture: x64
      - name: Setting up nox
        uses: wntrblm/nox@2024.04.15
        with:
          python-versions: "3.10"
      - name: Building documentation
        run: nox -s docs -- build
      - name: Upload documentation preview
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/
          retention-days: 5
      - name: Deploy documentation to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          nox -s docs -- deploy --update-aliases dev

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Perform gitleaks checks
        run: |
          # Download and check
          curl -LJO https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
          curl -LJO https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_checksums.txt
          shasum -a 256 --ignore-missing --quiet -c gitleaks_8.18.2_checksums.txt
          if [ $? != 0 ]; then exit 1; fi
          # Extract gitleaks
          tar -zxvf gitleaks_8.18.2_linux_x64.tar.gz gitleaks
          # Run gitleaks
          ./gitleaks detect \
            --config .gitleaks.toml \
            --gitleaks-ignore-path .gitleaksignore \
            --no-git

  dependency-review:
    runs-on: ubuntu-latest
    needs: [quality, tests]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4