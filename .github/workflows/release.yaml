---
name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get_version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Setting up PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: "3.10"
          architecture: x64

      - name: Setting up nox
        uses: wntrblm/nox@2024.04.15
        with:
          python-versions: "3.10"

      - name: Configure Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep -m 1 'version = "[0-9]*\.[0-9]*\.[0-9]*"' pyproject.toml | grep -o '[0-9]*\.[0-9]*\.[0-9]*')
          echo "Current version: $CURRENT_VERSION"
          
          # Calculate new version based on input
          IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
          MAJOR="${version_parts[0]}"
          MINOR="${version_parts[1]}"
          PATCH="${version_parts[2]}"
          
          if [[ "${{ github.event.inputs.version_type }}" == "major" ]]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [[ "${{ github.event.inputs.version_type }}" == "minor" ]]; then
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
          else
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          fi
          
          # Add prerelease suffix if requested
          if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            NEW_VERSION="${NEW_VERSION}-alpha.1"
          fi
          
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "New version will be: ${NEW_VERSION}"

  quality-checks:
    runs-on: ubuntu-latest
    needs: prepare-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setting up PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: "3.10"
          architecture: x64

      - name: Setting up nox
        uses: wntrblm/nox@2024.04.15
        with:
          python-versions: "3.10"

      - name: Performing lint checks
        run: nox -s lint

      - name: Performing static type checks
        run: nox -s check

  test-package:
    runs-on: ubuntu-latest
    needs: [prepare-release, quality-checks]
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install OS dependencies
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository ppa:openslide/openslide
          sudo apt install -y openslide-tools

      - name: Setting up PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Setting up nox
        uses: wntrblm/nox@2024.04.15
        with:
          python-versions: ${{ matrix.python-version }}

      - name: Running tests
        run: nox -s test_all

  security-scan:
    runs-on: ubuntu-latest
    needs: [prepare-release, quality-checks, test-package]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Perform gitleaks checks
        run: |
          # Download and check
          curl -LJO https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
          curl -LJO https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_checksums.txt
          shasum -a 256 --ignore-missing --quiet -c gitleaks_8.18.2_checksums.txt
          if [ $? != 0 ]; then exit 1; fi
          # Extract gitleaks
          tar -zxvf gitleaks_8.18.2_linux_x64.tar.gz gitleaks
          # Run gitleaks
          ./gitleaks detect \
            --config .gitleaks.toml \
            --gitleaks-ignore-path .gitleaksignore \
            --no-git

  create-release:
    runs-on: ubuntu-latest
    needs: [prepare-release, quality-checks, test-package, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setting up PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: "3.10"
          architecture: x64

      - name: Setting up nox
        uses: wntrblm/nox@2024.04.15
        with:
          python-versions: "3.10"

      - name: Configure Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.prepare-release.outputs.new_version }}"
          # Replace version in pyproject.toml
          sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"$VERSION\"/" pyproject.toml
          echo "Updated pyproject.toml with version $VERSION"
          
          # Stage and commit changes
          git add pyproject.toml
          git commit -m "chore: bump version to $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # Get latest release tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          
          if [ "$LATEST_TAG" = "none" ]; then
            # First release - get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since last tag
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges $LATEST_TAG..HEAD)
          fi
          
          # Create changelog content
          echo "# Changelog for version ${{ needs.prepare-release.outputs.new_version }}" > changelog.md
          echo "" >> changelog.md
          echo "## Changes" >> changelog.md
          echo "$COMMITS" >> changelog.md
          
          # Save changelog for release body
          CHANGELOG=$(cat changelog.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build package
        run: nox -s build

      - name: Test built package
        run: |
          python -m pip install dist/*.whl
          eva --version

      - name: Tag release
        run: |
          VERSION="${{ needs.prepare-release.outputs.new_version }}"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.prepare-release.outputs.new_version }}"
          name: "Release v${{ needs.prepare-release.outputs.new_version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            dist/*.tar.gz
            dist/*.whl
            LICENSE
            README.md

      - name: Build Release Docs
        run: |
          git fetch origin gh-pages:gh-pages
          VERSION="${{ needs.prepare-release.outputs.new_version }}"
          DOC_VERSION=${VERSION%.*}
          nox -s docs -- deploy --alias-type=copy --update-aliases "$DOC_VERSION"
          git push origin gh-pages

      - name: Publish package to PyPI
        run: nox -s publish -- --no-build
        env:
          PDM_PUBLISH_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PDM_PUBLISH_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

      - name: Create Pull Request for version bump
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to ${{ needs.prepare-release.outputs.new_version }}"
          title: "chore: bump version to ${{ needs.prepare-release.outputs.new_version }} [skip ci]"
          body: |
            This PR updates the pyproject.toml with the new version number.
            
            Version: v${{ needs.prepare-release.outputs.new_version }}
            
            *Automated PR created by the Release workflow*
          branch: bump-version-${{ needs.prepare-release.outputs.new_version }}
          base: main