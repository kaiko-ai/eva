---
trainer:
  class_path: eva.Trainer
  init_args:
    n_runs: &N_RUNS ${oc.env:N_RUNS, 1}
    default_root_dir: &OUTPUT_ROOT ${oc.env:OUTPUT_ROOT, logs/${oc.env:MODEL_NAME, vit_small_patch16_224}/consep}
    max_steps: &MAX_STEPS ${oc.env:MAX_STEPS, 513}
    log_every_n_steps: 6
    callbacks:
      - class_path: eva.callbacks.ConfigurationLogger
      - class_path: eva.vision.callbacks.SemanticSegmentationLogger
        init_args:
          log_every_n_epochs: 1
          mean: &NORMALIZE_MEAN ${oc.env:NORMALIZE_MEAN, [0.485, 0.456, 0.406]} 
          std: &NORMALIZE_STD ${oc.env:NORMALIZE_STD, [0.229, 0.224, 0.225]}
      - class_path: lightning.pytorch.callbacks.ModelCheckpoint
        init_args:
          filename: best
          save_last: true
          save_top_k: 1
          monitor: &MONITOR_METRIC ${oc.env:MONITOR_METRIC, val/GeneralizedDiceScore}
          mode: &MONITOR_METRIC_MODE ${oc.env:MONITOR_METRIC_MODE, max}
      - class_path: lightning.pytorch.callbacks.EarlyStopping
        init_args:
          min_delta: 0
          patience: 10
          monitor: *MONITOR_METRIC
          mode: *MONITOR_METRIC_MODE
    logger:
      - class_path: lightning.pytorch.loggers.TensorBoardLogger
        init_args:
          save_dir: *OUTPUT_ROOT
          name: ""
      - class_path: lightning.pytorch.loggers.WandbLogger
        init_args:
          project: ${oc.env:WANDB_PROJECT, "vit-adapter-experiments"}
          name: ${oc.env:WANDB_RUN_NAME, "consep-unet"}
model:
  class_path: eva.vision.models.modules.SemanticSegmentationModule
  init_args:
    encoder:
      class_path: monai.networks.nets.UNet
      init_args:
        spatial_dims: 2
        in_channels: 3
        out_channels: &NUM_CLASSES 8
        channels: [32, 64, 128, 256]
        strides: [2, 2, 2]
        num_res_units: 0
        dropout: 0.0
        bias: true
    decoder:
      class_path: torch.nn.Identity
    freeze_encoder: false
    criterion:
      class_path: eva.vision.losses.DiceLoss
      init_args:
        softmax: true
        batch: true
    lr_multiplier_encoder: 1.0
    optimizer:
      class_path: torch.optim.AdamW
      init_args:
        lr: ${oc.env:LR_VALUE, 0.002}
    lr_scheduler:
      class_path: torch.optim.lr_scheduler.PolynomialLR
      init_args:
        total_iters: *MAX_STEPS
        power: 0.9
    postprocess:
      predictions_transforms:
        - class_path: torch.argmax
          init_args:
            dim: 1
    metrics:
      common:
        - class_path: eva.metrics.AverageLoss
      evaluation:
        - class_path: eva.core.metrics.defaults.MulticlassSegmentationMetrics
          init_args:
            num_classes: *NUM_CLASSES
        - class_path: torchmetrics.ClasswiseWrapper
          init_args:
            metric:
              class_path: eva.core.metrics.GeneralizedDiceScore
              init_args:
                num_classes: *NUM_CLASSES
                input_format: index
                weight_type: linear
                per_class: true
data:
  class_path: eva.DataModule
  init_args:
    datasets:
      train:
        class_path: eva.vision.datasets.CoNSeP
        init_args: &DATASET_ARGS
          root: ${oc.env:DATA_ROOT, ./data/consep}
          split: train
          sampler:
            class_path: eva.vision.data.wsi.patching.samplers.ForegroundGridSampler
            init_args:
              max_samples: 25
          transforms:
            class_path: eva.vision.data.transforms.common.ResizeAndCrop
            init_args:
              size: ${oc.env:RESIZE_DIM, 224}  
              mean: *NORMALIZE_MEAN
              std: *NORMALIZE_STD
      val:
        class_path: eva.vision.datasets.CoNSeP
        init_args:
          <<: *DATASET_ARGS
          split: val
    dataloaders:
      train:
        batch_size: &BATCH_SIZE ${oc.env:BATCH_SIZE, 64}
        shuffle: true
      val:
        batch_size: *BATCH_SIZE
