---
trainer:
  class_path: eva.Trainer
  init_args:
    default_root_dir: &LIGHTNING_ROOT ${oc.env:LIGHTNING_ROOT, logs/dino_vits16/online/mhist}
    max_steps: &MAX_STEPS ${oc.env:MAX_STEPS, 12500}
    callbacks:
      - class_path: eva.callbacks.ConfigurationLogger
      - class_path: lightning.pytorch.callbacks.LearningRateMonitor
        init_args:
          logging_interval: epoch
      - class_path: lightning.pytorch.callbacks.ModelCheckpoint
        init_args:
          filename: best
          save_last: true
          save_top_k: 1
          monitor: &MONITOR_METRIC ${oc.env:MONITOR_METRIC, val/BinaryAccuracy}
          mode: &MONITOR_METRIC_MODE ${oc.env:MONITOR_METRIC_MODE, max}
      - class_path: lightning.pytorch.callbacks.EarlyStopping
        init_args:
          min_delta: 0
          patience: 51
          monitor: *MONITOR_METRIC
          mode: *MONITOR_METRIC_MODE
    logger:
      - class_path: lightning.pytorch.loggers.TensorBoardLogger
        init_args:
          save_dir: *LIGHTNING_ROOT
          name: ""
model:
  class_path: eva.HeadModule
  init_args:
    backbone:
      class_path: eva.vision.models.ModelFromRegistry
      init_args:
        model_name: ${oc.env:MODEL_NAME, universal/vit_small_patch16_224_dino}
        model_extra_kwargs: ${oc.env:MODEL_EXTRA_KWARGS, null}
    head:
      class_path: torch.nn.Linear
      init_args:
        in_features: ${oc.env:IN_FEATURES, 384}
        out_features: 1
    criterion: torch.nn.BCEWithLogitsLoss
    optimizer:
      class_path: torch.optim.SGD
      init_args:
        lr: &LR_VALUE ${oc.env:LR_VALUE, 0.000625}
        momentum: 0.9
        weight_decay: 0.0
    lr_scheduler:
      class_path: torch.optim.lr_scheduler.CosineAnnealingLR
      init_args:
        T_max: *MAX_STEPS
        eta_min: 0.0
    metrics:
      common:
        - class_path: eva.metrics.AverageLoss
        - class_path: eva.metrics.BinaryClassificationMetrics
data:
  class_path: eva.DataModule
  init_args:
    datasets:
      train:
        class_path: eva.vision.datasets.MHIST
        init_args: &DATASET_ARGS
          root: ${oc.env:DATA_ROOT, ./data}/mhist
          split: train
          transforms:
            class_path: eva.vision.data.transforms.common.ResizeAndCrop
            init_args:
              size: ${oc.env:RESIZE_DIM, 224}
              mean: ${oc.env:NORMALIZE_MEAN, [0.485, 0.456, 0.406]} 
              std: ${oc.env:NORMALIZE_STD, [0.229, 0.224, 0.225]}
      val:
        class_path: eva.vision.datasets.MHIST
        init_args:
          <<: *DATASET_ARGS
          split: test
    dataloaders:
      train:
        batch_size: &BATCH_SIZE ${oc.env:BATCH_SIZE, 256}
        shuffle: true
      val:
        batch_size: *BATCH_SIZE
