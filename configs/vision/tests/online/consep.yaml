---
trainer:
  class_path: eva.Trainer
  init_args:
    profiler: simple # TODO: remove
    n_runs: &N_RUNS ${oc.env:N_RUNS, 1}
    default_root_dir: &LIGHTNING_ROOT ${oc.env:LIGHTNING_ROOT, logs/test/online/consep}
    max_steps: &MAX_STEPS ${oc.env:MAX_STEPS, 4}
    limit_train_batches: 2
    limit_val_batches: 2
    log_every_n_steps: 2
    val_check_interval: 2
    num_sanity_val_steps: 0
    check_val_every_n_epoch: null
    checkpoint_type: ${oc.env:CHECKPOINT_TYPE, best}
    callbacks:
      - class_path: eva.callbacks.ConfigurationLogger
      - class_path: eva.vision.callbacks.SemanticSegmentationLogger
        init_args:
          log_every_n_epochs: 1
          mean: &NORMALIZE_MEAN ${oc.env:NORMALIZE_MEAN, [0.485, 0.456, 0.406]} 
          std: &NORMALIZE_STD ${oc.env:NORMALIZE_STD, [0.229, 0.224, 0.225]}
      - class_path: lightning.pytorch.callbacks.ModelCheckpoint
        init_args:
          filename: best
          save_last: ${oc.env:SAVE_LAST, false}
          save_top_k: 1
          monitor: &MONITOR_METRIC ${oc.env:MONITOR_METRIC, 'val/MonaiDiceScore'}
          mode: &MONITOR_METRIC_MODE ${oc.env:MONITOR_METRIC_MODE, max}
      - class_path: lightning.pytorch.callbacks.EarlyStopping
        init_args:
          min_delta: 0
          patience: ${oc.env:PATIENCE, 200}
          monitor: *MONITOR_METRIC
          mode: *MONITOR_METRIC_MODE
    logger:
      - class_path: lightning.pytorch.loggers.TensorBoardLogger
        init_args:
          save_dir: *LIGHTNING_ROOT
          name: ""
          version: ""
model:
  class_path: eva.vision.models.modules.SemanticSegmentationModule
  init_args:
    encoder:
      class_path: eva.vision.models.ModelFromRegistry
      init_args:
        model_name: ${oc.env:MODEL_NAME, universal/vit_small_patch16_224_dino}
        model_kwargs:
          out_indices: ${oc.env:OUT_INDICES, 1}
        model_extra_kwargs: ${oc.env:MODEL_EXTRA_KWARGS, null}
    decoder:
      class_path: eva.vision.models.networks.decoders.segmentation.ConvDecoderWithImage
      init_args:
        in_features: ${oc.env:IN_FEATURES, 384}
        num_classes: &NUM_CLASSES 5
    criterion:
      class_path: eva.vision.losses.DiceLoss
      init_args:
        softmax: true
        batch: true
    lr_multiplier_encoder: 0.0
    optimizer:
      class_path: torch.optim.AdamW
      init_args:
        lr: ${oc.env:LR_VALUE, 0.002}
    postprocess:
      predictions_transforms:
        - class_path: torch.argmax
          init_args:
            dim: 1
    metrics:
      common:
        - class_path: eva.metrics.AverageLoss
      evaluation:
        - class_path: eva.vision.metrics.defaults.MulticlassSegmentationMetrics
          init_args:
            num_classes: *NUM_CLASSES
        - class_path: torchmetrics.ClasswiseWrapper
          init_args:
            metric:
              class_path: eva.vision.metrics.MonaiDiceScore
              init_args:
                include_background: true
                num_classes: *NUM_CLASSES
                reduction: none
            labels:
              - background
              - other
              - inflammatory
              - epithelial
              - spindle-shaped
data:
  class_path: eva.DataModule
  init_args:
    datasets:
      train:
        class_path: eva.vision.datasets.CoNSeP
        init_args: &DATASET_ARGS
          root: ${oc.env:TESTS_ROOT, tests/eva}/assets/vision/datasets/consep
          split: train
          sampler: eva.vision.data.wsi.patching.samplers.GridSampler
          transforms:
            class_path: eva.vision.data.transforms.common.ResizeAndCrop
            init_args:
              size: ${oc.env:RESIZE_DIM, 224}  
              mean: *NORMALIZE_MEAN
              std: *NORMALIZE_STD
          width: 16
          height: 16
      val:
        class_path: eva.vision.datasets.CoNSeP
        init_args:
          <<: *DATASET_ARGS
          split: val
    dataloaders:
      train:
        batch_size: &BATCH_SIZE 2
        shuffle: true
        num_workers: 0
        pin_memory: false
        persistent_workers: false
        prefetch_factor: null
      val:
        batch_size: *BATCH_SIZE
        num_workers: 0
        pin_memory: false
        persistent_workers: false
        prefetch_factor: null
