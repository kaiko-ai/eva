---
trainer:
  class_path: eva.Trainer
  init_args:
    n_runs: &N_RUNS ${oc.env:N_RUNS, 1}
    default_root_dir: &OUTPUT_ROOT ${oc.env:OUTPUT_ROOT, logs/${oc.env:DINO_BACKBONE, dino_vits16}/offline/panda}
    max_steps: &MAX_STEPS ${oc.env:MAX_STEPS, 12500}
    callbacks:
      - class_path: lightning.pytorch.callbacks.LearningRateMonitor
        init_args:
          logging_interval: epoch
      - class_path: lightning.pytorch.callbacks.ModelCheckpoint
        init_args:
          filename: best
          save_last: true
          save_top_k: 1
          monitor: &MONITOR_METRIC ${oc.env:MONITOR_METRIC, val/MulticlassAccuracy}
          mode: &MONITOR_METRIC_MODE ${oc.env:MONITOR_METRIC_MODE, max}
      - class_path: lightning.pytorch.callbacks.EarlyStopping
        init_args:
          min_delta: 0
          patience: 13
          monitor: *MONITOR_METRIC
          mode: *MONITOR_METRIC_MODE
      - class_path: eva.callbacks.EmbeddingsWriter
        init_args:
          group_key: slide_id
          output_dir: &DATASET_EMBEDDINGS_ROOT ${oc.env:EMBEDDINGS_ROOT, ./data/embeddings}/${oc.env:DINO_BACKBONE, dino_vits16}/panda_fg_150
          dataloader_idx_map:
            0: train
            1: val
            2: test
          backbone:
            class_path: eva.models.ModelFromFunction
            init_args:
              path: torch.hub.load
              arguments:
                repo_or_dir: ${oc.env:REPO_OR_DIR, facebookresearch/dino:main}
                model: ${oc.env:DINO_BACKBONE, dino_vits16}
                pretrained: ${oc.env:PRETRAINED, true}
                force_reload: ${oc.env:FORCE_RELOAD, false}
              checkpoint_path: ${oc.env:CHECKPOINT_PATH, null}
    logger:
      - class_path: lightning.pytorch.loggers.TensorBoardLogger
        init_args:
          save_dir: *OUTPUT_ROOT
          name: ""
model:
  class_path: eva.HeadModule
  init_args:
    head:
      class_path: eva.vision.models.networks.ABMIL
      init_args:
        input_size: ${oc.env:IN_FEATURES, 384}
        output_size: &NUM_CLASSES 6
    criterion: torch.nn.CrossEntropyLoss
    optimizer:
      class_path: torch.optim.SGD
      init_args:
        lr: &LR_VALUE ${oc.env:LR_VALUE, 0.00004}
        momentum: 0.9
        weight_decay: 0.0
    lr_scheduler:
      class_path: torch.optim.lr_scheduler.CosineAnnealingLR
      init_args:
        T_max: *MAX_STEPS
        eta_min: 0.0
    metrics:
      common:
        - class_path: eva.metrics.AverageLoss
        - class_path: eva.metrics.MulticlassClassificationMetrics
          init_args:
            num_classes: *NUM_CLASSES
data:
  class_path: eva.DataModule
  init_args:
    datasets:
      train:
        class_path: eva.datasets.MultiEmbeddingsClassificationDataset
        init_args: &DATASET_ARGS
          root: *DATASET_EMBEDDINGS_ROOT
          manifest_file: manifest.csv
          split: train
      val:
        class_path: eva.datasets.MultiEmbeddingsClassificationDataset
        init_args:
          <<: *DATASET_ARGS
          split: val
      test:
        class_path: eva.datasets.MultiEmbeddingsClassificationDataset
        init_args:
          <<: *DATASET_ARGS
          split: test
      predict:
        - class_path: eva.vision.datasets.MultiWsiClassificationDataset
          init_args: &PREDICT_DATASET_ARGS
            root: ${oc.env:DATA_ROOT, ./slide_data}/panda
            manifest_file: manifest_train.csv
            sampler:
              class_path: eva.vision.data.wsi.patching.samplers.RandomSampler
              init_args:
                n_samples: 100
            width: 224
            height: 224
            target_mpp: 0.5
            transforms:
              class_path: eva.vision.data.transforms.common.ResizeAndCrop
              init_args:
                size: ${oc.env:RESIZE_DIM, 224} 
                mean: ${oc.env:NORMALIZE_MEAN, [0.485, 0.456, 0.406]} 
                std: ${oc.env:NORMALIZE_STD, [0.229, 0.224, 0.225]}
        - class_path: eva.vision.datasets.MultiWsiClassificationDataset
          init_args:
            <<: *PREDICT_DATASET_ARGS
            manifest_file: manifest_val.csv
        - class_path: eva.vision.datasets.MultiWsiClassificationDataset
          init_args:
            <<: *PREDICT_DATASET_ARGS
            manifest_file: manifest_test.csv
    dataloaders:
      train:
        batch_size: &BATCH_SIZE ${oc.env:BATCH_SIZE, 16}
        shuffle: true
      val:
        batch_size: *BATCH_SIZE
      predict:
        batch_size: &PREDICT_BATCH_SIZE ${oc.env:PREDICT_BATCH_SIZE, 64}
        num_workers: 12 #multiprocessing.cpu_count
        prefetch_factor: 2

