trainer:
  class_path: eva.Trainer
  init_args:
    n_runs: &N_RUNS ${oc.env:N_RUNS, 1}
    default_root_dir: &OUTPUT_ROOT ${oc.env:OUTPUT_ROOT, logs/${oc.env:DINO_BACKBONE, dino_vits16}/online/consep}
    max_steps: &MAX_STEPS ${oc.env:MAX_STEPS, 513}
    callbacks:
      - class_path: eva.vision.callbacks.SemanticSegmentationLogger
        init_args:
          log_every_n_epochs: 1
          mean: &NORMALIZE_MEAN ${oc.env:NORMALIZE_MEAN, [0.485, 0.456, 0.406]} 
          std: &NORMALIZE_STD ${oc.env:NORMALIZE_STD, [0.229, 0.224, 0.225]}
      - class_path: lightning.pytorch.callbacks.ModelCheckpoint
        init_args:
          filename: best
          save_last: true
          save_top_k: 1
          monitor: &MONITOR_METRIC ${oc.env:MONITOR_METRIC, val/MulticlassJaccardIndex}
          mode: &MONITOR_METRIC_MODE ${oc.env:MONITOR_METRIC_MODE, max}
      - class_path: lightning.pytorch.callbacks.EarlyStopping
        init_args:
          min_delta: 0
          patience: 5
          monitor: *MONITOR_METRIC
          mode: *MONITOR_METRIC_MODE
    logger:
      - class_path: lightning.pytorch.loggers.TensorBoardLogger
        init_args:
          save_dir: *OUTPUT_ROOT
          name: ""
model:
  class_path: eva.vision.models.modules.SemanticSegmentationModule
  init_args:
    encoder:
      class_path: eva.vision.models.networks.encoders.VisionTransformerEncoder
      init_args:
        path: torch.hub.load
        arguments:
          repo_or_dir: ${oc.env:REPO_OR_DIR, facebookresearch/dino:main}
          model: ${oc.env:DINO_BACKBONE, dino_vits16}
          pretrained: ${oc.env:PRETRAINED, true}
          force_reload: ${oc.env:FORCE_RELOAD, false}
        checkpoint_path: &CHECKPOINT_PATH ${oc.env:CHECKPOINT_PATH, null}
    decoder:
      class_path: eva.vision.models.networks.decoders.segmentation.ConvDecoderMS
      init_args:
        in_features: ${oc.env:DECODER_IN_FEATURES, 384}
        num_classes:  &NUM_CLASSES 8
    criterion: torch.nn.CrossEntropyLoss
    lr_multiplier_encoder: 0.0
    optimizer:
      class_path: torch.optim.AdamW
      init_args:
        lr: 0.0001
        weight_decay: 0.05
    lr_scheduler:
      class_path: torch.optim.lr_scheduler.PolynomialLR
      init_args:
        total_iters: *MAX_STEPS
        power: 0.9
    metrics:
      common:
        - class_path: eva.metrics.AverageLoss
      evaluation:
        - class_path: eva.core.metrics.defaults.MulticlassSegmentationMetrics
          init_args:
            num_classes: *NUM_CLASSES
        - class_path: eva.core.metrics.wrappers.ClasswiseWrapper
          init_args:
            metric:
              class_path: torchmetrics.classification.MulticlassF1Score
              init_args:
                num_classes: *NUM_CLASSES
                average: null
data:
  class_path: eva.DataModule
  init_args:
    datasets:
      train:
        class_path: eva.vision.datasets.CoNSeP
        init_args: &DATASET_ARGS
          root: ${oc.env:DATA_ROOT, ./data}/consep
          split: train
          sampler:
            class_path: eva.vision.data.wsi.patching.samplers.ForegroundGridSampler
            init_args:
              max_samples: 25
          transforms:
            class_path: eva.vision.data.transforms.common.ResizeAndCrop
            init_args:
              size: ${oc.env:RESIZE_DIM, 224}  
              mean: *NORMALIZE_MEAN
              std: *NORMALIZE_STD
      val:
        class_path: eva.vision.datasets.CoNSeP
        init_args:
          <<: *DATASET_ARGS
          split: val
    dataloaders:
      train:
        batch_size: &BATCH_SIZE ${oc.env:BATCH_SIZE, 16}
        shuffle: true
      val:
        batch_size: *BATCH_SIZE
